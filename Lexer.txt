Type : int
ID : gb
ASSIGN : =
NUM : 82
SEMI : ;
Type : int
ID : factoring
LEFT_BRACKET : (
Type : int
ID : y
COMMA : ,
Type : char*
ID : t
COMMA : ,
Type : int
ID : u
RIGHT_BRACKET : )
LEFT_CURLY_BRACE : {
WHILE : while
LEFT_BRACKET : (
ID : y
COMPARE_EQUAL : ==
NUM : 7
RIGHT_BRACKET : )
LEFT_CURLY_BRACE : {
ID : y
ASSIGN : =
ID : y
PLUS : +
NUM : 1
SEMI : ;
ID : u
ASSIGN : =
NUM : 0
SEMI : ;
RIGHT_CURLY_BRACE : }
RETURN : return
ID : u
SEMI : ;
RIGHT_CURLY_BRACE : }
Type : int
ID : main
LEFT_BRACKET : (
RIGHT_BRACKET : )
LEFT_CURLY_BRACE : {
Type : char*
ID : d
SEMI : ;
Type : int
ID : po
SEMI : ;
ID : factoring
LEFT_BRACKET : (
NUM : 9
COMMA : ,
ID : d
COMMA : ,
NUM : 8
RIGHT_BRACKET : )
SEMI : ;
Type : int
ID : i
SEMI : ;
IF : if
LEFT_BRACKET : (
ID : i
GREATER_THAN_EQUAL : >=
NUM : 2
RIGHT_BRACKET : )
LEFT_CURLY_BRACE : {
ID : po
ASSIGN : =
NUM : 1
SEMI : ;
RIGHT_CURLY_BRACE : }
ELSE : else
LEFT_CURLY_BRACE : {
ID : po
ASSIGN : =
NUM : 0
SEMI : ;
RIGHT_CURLY_BRACE : }
Type : int
ID : y
ASSIGN : =
NUM : 8
MULTIPLICATION : *
NUM : 9
PLUS : +
NUM : 3
MULTIPLICATION : *
NUM : 4
SEMI : ;
RIGHT_CURLY_BRACE : }
